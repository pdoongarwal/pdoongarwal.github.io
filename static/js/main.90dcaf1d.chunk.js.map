{"version":3,"sources":["Components/Sun.jsx","Components/Orbit.jsx","Components/Planet.jsx","Data/PlanetsInfo.js","App.js","index.js"],"names":["Sun","textRef","texture","useMemo","THREE","load","position","onPointerOver","current","innerText","attach","args","object","Orbit","radius","material","color","geometry","vertices","shift","line","rotation","Math","PI","Planet","name","orbitRadius","revolutionDuration","rotationSpeed","imagePath","mesh","useRef","useFrame","speedConstant","x","sin","Date","now","z","cos","orbitCalculation","ref","PlanetsInfo","extend","OrbitControls","Controls","autoRotate","orbitRef","useThree","camera","gl","angle","y","tan","update","domElement","App","React","useState","checked","setChecked","push","map","key","planetInfo","className","type","onChange","src","autoPlay","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90dcaf1d.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nconst Sun = ({ textRef }) => {\r\n  const texture = useMemo(() => new THREE.TextureLoader().load(\"sun.jpg\"), []);\r\n\r\n  return (\r\n    <mesh\r\n      position={[0, 0, 0]}\r\n      onPointerOver={() => (textRef.current.innerText = \"Sun\")}\r\n    >\r\n      <sphereBufferGeometry attach=\"geometry\" args={[1.0, 32, 32]} />\r\n      <meshBasicMaterial attach=\"material\">\r\n        <primitive\r\n          attach=\"map\"\r\n          object={texture}\r\n          //   onUpdate={(self) => img && (self.needsUpdate = true)}\r\n        ></primitive>\r\n      </meshBasicMaterial>\r\n    </mesh>\r\n  );\r\n};\r\n\r\nexport default Sun;\r\n","import React from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nconst Orbit = ({ radius }) => {\r\n  var segments = 32,\r\n    material = new THREE.LineBasicMaterial({ color: 0xe0e0e0 }),\r\n    geometry = new THREE.CircleGeometry(radius, segments);\r\n\r\n  // Remove center vertex\r\n  geometry.vertices.shift();\r\n  const line = new THREE.LineLoop(geometry, material);\r\n  return (\r\n    <primitive\r\n      object={line}\r\n      position={[0, 0, 0]}\r\n      rotation={[Math.PI / 2, 0, 0]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Orbit;\r\n","import React, { useRef } from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport * as THREE from \"three\";\r\n\r\nconst orbitCalculation = function (radius, revolutionDuration) {\r\n  const speedConstant = 6000 * revolutionDuration;\r\n  return {\r\n    x:\r\n      Math.sin(((Date.now() % speedConstant) / speedConstant) * Math.PI * 2) *\r\n      radius,\r\n    z:\r\n      Math.cos(((Date.now() % speedConstant) / speedConstant) * Math.PI * 2) *\r\n      radius,\r\n  };\r\n};\r\n\r\nconst Planet = ({\r\n  name,\r\n  orbitRadius,\r\n  radius,\r\n  revolutionDuration,\r\n  rotationSpeed,\r\n  imagePath,\r\n  textRef,\r\n}) => {\r\n  const texture = new THREE.TextureLoader().load(imagePath);\r\n  const mesh = useRef();\r\n\r\n  useFrame(() => {\r\n    const position = orbitCalculation(orbitRadius, revolutionDuration);\r\n    mesh.current.position.x = position.x;\r\n    mesh.current.position.z = position.z;\r\n    mesh.current.rotation.z += (Math.PI * rotationSpeed) / 10;\r\n  });\r\n\r\n  return (\r\n    <mesh\r\n      position={[2, 0, 0]}\r\n      ref={mesh}\r\n      rotation={[Math.PI / 2, 0, 0]}\r\n      onPointerOver={() => (textRef.current.innerText = name)}\r\n    >\r\n      <sphereBufferGeometry attach=\"geometry\" args={[radius, 16, 16]} />\r\n      <meshBasicMaterial attach=\"material\">\r\n        <primitive attach=\"map\" object={texture}></primitive>\r\n      </meshBasicMaterial>\r\n    </mesh>\r\n  );\r\n};\r\n\r\nexport default Planet;\r\n","const PlanetsInfo = [\r\n  {\r\n    name: \"Mercury\",\r\n    orbitRadius: 2,\r\n    radius: 0.2,\r\n    rotationSpeed: 0.0017,\r\n    imagePath: \"mercury.jpg\",\r\n    revolutionDuration: 0.2,\r\n  },\r\n  {\r\n    name: \"Venus\",\r\n    orbitRadius: 4,\r\n    radius: 0.3,\r\n    rotationSpeed: 0.00041,\r\n    imagePath: \"venus.jpg\",\r\n    revolutionDuration: 0.6,\r\n  },\r\n  {\r\n    name: \"Earth\",\r\n    orbitRadius: 6,\r\n    radius: 0.4,\r\n    rotationSpeed: 0.1,\r\n    revolutionDuration: 1,\r\n    imagePath: \"earth.jpg\",\r\n  },\r\n  {\r\n    name: \"Mars\",\r\n    orbitRadius: 8,\r\n    radius: 0.5,\r\n    rotationSpeed: 0.096,\r\n    imagePath: \"mars.jpg\",\r\n    revolutionDuration: 1.9,\r\n  },\r\n  {\r\n    name: \"Jupiter\",\r\n    orbitRadius: 10,\r\n    radius: 0.7,\r\n    rotationSpeed: 0.24,\r\n    imagePath: \"jupiter.jpg\",\r\n    revolutionDuration: 11.9,\r\n  },\r\n  {\r\n    name: \"Saturn\",\r\n    orbitRadius: 12,\r\n    radius: 0.7,\r\n    rotationSpeed: 0.218,\r\n    imagePath: \"saturn.jpg\",\r\n    revolutionDuration: 29.5,\r\n  },\r\n  {\r\n    name: \"Uranus\",\r\n    orbitRadius: 14,\r\n    radius: 0.6,\r\n    rotationSpeed: 0.141,\r\n    imagePath: \"uranus.jpg\",\r\n    revolutionDuration: 84,\r\n  },\r\n  {\r\n    name: \"Neptune\",\r\n    orbitRadius: 16,\r\n    radius: 0.6,\r\n    rotationSpeed: 0.15,\r\n    imagePath: \"neptune.jpg\",\r\n    revolutionDuration: 164.8,\r\n  },\r\n];\r\n\r\nexport default PlanetsInfo;\r\n","import React, { useRef } from \"react\";\r\nimport { Canvas, useFrame, extend, useThree } from \"react-three-fiber\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport Sun from \"./Components/Sun\";\r\nimport Orbit from \"./Components/Orbit\";\r\nimport Planet from \"./Components/Planet\";\r\nimport PlanetsInfo from \"./Data/PlanetsInfo\";\r\n\r\nimport \"./App.css\";\r\n\r\nextend({ OrbitControls });\r\n\r\nconst Controls = ({ autoRotate }) => {\r\n  const orbitRef = useRef();\r\n  const { camera, gl } = useThree();\r\n  let angle = 0;\r\n  camera.position.x = 0;\r\n  camera.position.y = 15;\r\n  camera.position.z = 25;\r\n\r\n  useFrame(() => {\r\n    if (autoRotate) {\r\n      camera.position.x = 10 * Math.cos(angle);\r\n      camera.position.y = 10 * Math.sin(angle);\r\n      camera.position.z = 10 * Math.tan(angle);\r\n      angle += 0.001;\r\n    }\r\n    orbitRef.current.update();\r\n  });\r\n\r\n  return <orbitControls args={[camera, gl.domElement]} ref={orbitRef} />;\r\n};\r\n\r\nfunction App() {\r\n  const textRef = useRef();\r\n  const [checked, setChecked] = React.useState(false);\r\n\r\n  const orbitRadius = [];\r\n  for (let radius = 2; radius <= 16; radius += 2) {\r\n    orbitRadius.push(radius);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Canvas camera={{ position: [0, 0, 17] }}>\r\n        <Controls autoRotate={checked} />\r\n        {orbitRadius.map((radius) => (\r\n          <Orbit radius={radius} key={radius} />\r\n        ))}\r\n        <Sun textRef={textRef} />\r\n        {PlanetsInfo.map((planetInfo) => (\r\n          <Planet {...planetInfo} key={planetInfo.name} textRef={textRef} />\r\n        ))}\r\n      </Canvas>\r\n      <h1 ref={textRef} className=\"text\">\r\n        Sun\r\n      </h1>\r\n      <label className=\"auto-rotate\">\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={checked}\r\n          onChange={() => setChecked(!checked)}\r\n        />\r\n        Auto Control Camera\r\n      </label>\r\n      <audio src=\"cosmos.mp3\" autoPlay />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}