{"version":3,"sources":["Config/Config.js","Repository/BaseRepository.js","Repository/JobRepository.js","Components/JobListItem.jsx","Components/JobFilterForm.jsx","Components/JobList.jsx","App.js","serviceWorker.js","index.js"],"names":["Config","apiUrl","apiClient","axios","create","baseURL","fetchJobList","jobFilter","get","params","description","location","lat","long","full_time","isFullTime","page","JobListItem","job","Item","Meta","avatar","src","company_logo","size","title","label","type","company","span","href","url","target","rel","created_at","JobFilterForm","onSubmit","Form","useForm","form","useState","forceUpdate","useEffect","name","layout","onFinish","style","placeholder","shouldUpdate","htmlType","JobList","props","getJobList","filters","setState","isLoading","then","response","jobs","data","catch","error","console","log","finally","formValues","skill","state","this","margin","itemLayout","bordered","dataSource","renderItem","pagination","pageSize","showTotal","total","header","loading","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.58f5c60a.chunk.js","sourcesContent":["const Config = {\r\n  apiUrl: \"https://github-jobs-proxy.appspot.com/\",\r\n};\r\n\r\nexport default Config;\r\n","import axios from \"axios\";\r\n\r\nimport Config from \"../Config/Config\";\r\n\r\nconst apiClient = axios.create({ baseURL: Config.apiUrl });\r\n\r\nexport default apiClient;\r\n","import apiClient from \"./BaseRepository\";\r\n\r\nexport const fetchJobList = (jobFilter = {}) =>\r\n  apiClient.get(\"positions\", {\r\n    params: {\r\n      description: jobFilter.description,\r\n      location: jobFilter.location,\r\n      lat: jobFilter.lat,\r\n      long: jobFilter.long,\r\n      full_time: jobFilter.isFullTime,\r\n      page: jobFilter.page,\r\n    },\r\n  });\r\n","import React from \"react\";\r\nimport { Descriptions, List, Avatar } from \"antd\";\r\n\r\nexport default function JobListItem({ job }) {\r\n  return (\r\n    <List.Item>\r\n      <List.Item.Meta avatar={<Avatar src={job.company_logo} size=\"large\" />} />\r\n      <Descriptions title={job.title}>\r\n        <Descriptions.Item label=\"Type\">{job.type}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Company\">{job.company}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Location\">{job.location}</Descriptions.Item>\r\n        <Descriptions.Item span={2}>\r\n          <a href={job.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            Check Description\r\n          </a>\r\n        </Descriptions.Item>\r\n        <Descriptions.Item label=\"Posted On\">\r\n          {job.created_at}\r\n        </Descriptions.Item>\r\n      </Descriptions>\r\n    </List.Item>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\n\r\nexport default function JobFilterForm({ onSubmit }) {\r\n  const [form] = Form.useForm();\r\n  const [, forceUpdate] = useState();\r\n\r\n  useEffect(() => {\r\n    forceUpdate({});\r\n  }, []);\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      name=\"horizontal_login\"\r\n      layout=\"inline\"\r\n      onFinish={onSubmit}\r\n      style={{\r\n        \"justify-content\": \"center\",\r\n      }}\r\n    >\r\n      <Form.Item name=\"company\">\r\n        <Input placeholder=\"Company\" />\r\n      </Form.Item>\r\n      <Form.Item name=\"skill\">\r\n        <Input placeholder=\"Skill\" />\r\n      </Form.Item>\r\n      <Form.Item name=\"location\">\r\n        <Input placeholder=\"Location\" />\r\n      </Form.Item>\r\n      <Form.Item shouldUpdate={true}>\r\n        {() => (\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Search\r\n          </Button>\r\n        )}\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { List } from \"antd\";\r\n\r\nimport { fetchJobList } from \"../Repository/JobRepository\";\r\nimport JobListItem from \"./JobListItem\";\r\nimport JobFilterForm from \"./JobFilterForm\";\r\n\r\nexport default class JobList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      jobs: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getJobList({ description: \" \", location: \" \" });\r\n  }\r\n\r\n  getJobList = (filters = {}) => {\r\n    this.setState({ isLoading: true });\r\n    fetchJobList(filters)\r\n      .then((response) => {\r\n        this.setState({ jobs: response.data });\r\n      })\r\n      .catch((error) => console.log(error))\r\n      .finally(() => this.setState({ isLoading: false }));\r\n  };\r\n\r\n  onSubmit = (formValues) => {\r\n    console.log(\"Finish:\", formValues);\r\n    const { company, skill, location } = formValues;\r\n    this.getJobList({\r\n      description: `${company || \"\"} ${skill || \"\"}`,\r\n      location: location || \" \",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { jobs, isLoading } = this.state;\r\n    return (\r\n      <List\r\n        style={{ margin: \"4% 8%\" }}\r\n        itemLayout=\"vertical\"\r\n        bordered={true}\r\n        dataSource={jobs}\r\n        renderItem={(job) => <JobListItem job={job} />}\r\n        pagination={{ pageSize: 10, showTotal: (total) => total }}\r\n        header={<JobFilterForm onSubmit={this.onSubmit} />}\r\n        loading={isLoading}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport JobList from \"./Components/JobList\";\n\nfunction App() {\n  return <JobList />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}