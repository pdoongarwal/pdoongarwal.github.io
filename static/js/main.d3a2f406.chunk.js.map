{"version":3,"sources":["ImageUpload.jsx","App.jsx","serviceWorker.js","index.js"],"names":["getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","ImageUpload","state","loading","handleChange","info","onUpload","props","file","status","originFileObj","imageUrl","setState","uploadButton","this","LoadingOutlined","PlusOutlined","className","name","listType","showUploadList","action","onChange","React","Component","App","classifyImg","classifier","image","document","getElementById","classify","err","results","console","log","saveModel","imageSrc","ml5","then","src","id","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d3a2f406.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Upload } from \"antd\";\r\nimport { LoadingOutlined, PlusOutlined } from \"@ant-design/icons\";\r\n\r\nfunction getBase64(img, callback) {\r\n  const reader = new FileReader();\r\n  reader.addEventListener(\"load\", () => callback(reader.result));\r\n  reader.readAsDataURL(img);\r\n}\r\n\r\nexport default class ImageUpload extends React.Component {\r\n  state = {\r\n    loading: false\r\n  };\r\n\r\n  handleChange = info => {\r\n    const { onUpload } = this.props;\r\n\r\n    if (info.file.status === \"uploading\") {\r\n      this.setState({ loading: true });\r\n      return;\r\n    }\r\n    if (info.file.status === \"done\") {\r\n      // Get this url from response in real world.\r\n      getBase64(info.file.originFileObj, imageUrl => {\r\n        this.setState({\r\n          imageUrl,\r\n          loading: false\r\n        });\r\n        onUpload(imageUrl);\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const uploadButton = (\r\n      <div>\r\n        {this.state.loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n        <div className=\"ant-upload-text\">Upload</div>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <Upload\r\n        name=\"avatar\"\r\n        listType=\"picture-card\"\r\n        className=\"avatar-uploader\"\r\n        showUploadList={false}\r\n        action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n        // beforeUpload={beforeUpload}\r\n        onChange={this.handleChange}\r\n      >\r\n        {uploadButton}\r\n      </Upload>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport * as ml5 from \"ml5\";\n\nimport ImageUpload from \"./ImageUpload\";\n// import logo from './logo.svg';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  classifyImg = () => {\n    const { classifier } = this.state;\n    const image = document.getElementById(\"image-to-predict\");\n    classifier.classify(image, 5, (err, results) => {\n      console.log(results);\n    });\n  };\n\n  saveModel = classifier => {\n    console.log(\"Model Loaded!\");\n    this.setState({\n      classifier\n    });\n  };\n\n  componentDidMount() {\n    ml5.imageClassifier(\"MobileNet\").then(this.saveModel);\n  }\n\n  onUpload = imageSrc => {\n    this.setState(\n      {\n        imageSrc\n      },\n      this.classifyImg\n    );\n  };\n\n  render() {\n    const { imageSrc } = this.state;\n    return (\n      <>\n        <ImageUpload onUpload={this.onUpload}></ImageUpload>\n        {imageSrc ? (\n          <img src={imageSrc} id=\"image-to-predict\" alt=\"logo\" />\n        ) : null}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}